name: Build ImmortalWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  ImmortalWrt_VERSION: v24.10.2
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 --branch ${{ env.ImmortalWrt_VERSION }} https://github.com/ImmortalWrt/ImmortalWrt.git
        cd ImmortalWrt
        echo "ImmortalWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd ImmortalWrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure ImmortalWrt for CMCC RAX3000M (without USB Redirector first)
      run: |
        cd ImmortalWrt
        
        # First build WITHOUT USB Redirector to ensure base system works
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_uhttpd=y
        CONFIG_PACKAGE_uhttpd-mod-ubus=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig
        
        echo "=== Configuration complete (without USB Redirector) ==="

    - name: Download package sources
      run: |
        cd ImmortalWrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base ImmortalWrt firmware (without USB Redirector)
      run: |
        cd ImmortalWrt
        
        echo "=== Building base ImmortalWrt firmware ==="
        
        # Build the base system first
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Check base build results
      run: |
        cd ImmortalWrt
        
        echo "=== Base build results ==="
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "No .bin files"
        
        echo ""
        echo "Packages built:"
        find bin/packages/ -name "*.ipk" | wc -l

    - name: Copy USB Redirector package to ImmortalWrt
      run: |
        echo "=== Now adding USB Redirector Server package ==="
        
        # Copy package to ImmortalWrt
        cp -r usb-redirector-server ImmortalWrt/package/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' ImmortalWrt/package/usb-redirector-server/Makefile
        
        echo "Package copied successfully"

    - name: Build USB Redirector packages separately
      run: |
        cd ImmortalWrt
        
        echo "=== Building USB Redirector packages separately ==="
        
        # Create kernel 6.6 compatibility patch
        echo "=== Creating kernel 6.6 compatibility patch ==="
        
        mkdir -p package/usb-redirector-server/patches
        
        # Create patch file for kernel 6.4+ compatibility
        cat > package/usb-redirector-server/patches/001-kernel-6.6-compat.patch << 'EOF'
        --- a/src/tusbd/cdev.c
        +++ b/src/tusbd/cdev.c
        @@ -10,6 +10,7 @@
          */
         
         #include "usbd.h"
        +#include <linux/version.h>
         #include <linux/ctype.h> 
         #define IIIIlIlI (0x2264+1444-0x2708)
         static struct cdev*IllIIll=NULL;static dev_t llIlIll=MKDEV((0xcd5+4386-0x1df7),
        @@ -38,7 +39,11 @@
         .mmap=lIIIllllI,.open=IIlIlllll,.release=IIlllIlll,};int lIIlllllI(void){int 
         IlIlI=(0x679+8196-0x267d);lIlll(
         "\x69\x6e\x69\x74\x5f\x63\x64\x65\x76\x5f\x6d\x6f\x64\x75\x6c\x65\x3a\x20\x2b\x2b" "\n"
        -);do{mutex_init(&lIIIlIl);lIIIlII=class_create(THIS_MODULE,IIIllII);if(lIIIlII==
        +);do{mutex_init(&lIIIlIl);lIIIlII=
        +#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)
        +class_create(IIIllII);
        +#else
        +class_create(THIS_MODULE,IIIllII);
        +#endif
        +if(lIIIlII==
         NULL){lIlll(
         "\x69\x6e\x69\x74\x5f\x63\x64\x65\x76\x5f\x6d\x6f\x64\x75\x6c\x65\x3a\x20\x63\x6c\x61\x73\x73\x5f\x63\x72\x65\x61\x74\x65\x20\x66\x61\x69\x6c\x65\x64\x2e" "\n"
         );IlIlI=-ENOMEM;break;}
        @@ -48,7 +53,11 @@
         #elif KERNEL_LT_EQ((0xd63+1026-0x1163),(0x332+239-0x41b),(0x12b7+4997-0x2623)) 
         lIIIlII->uevent=lIIllIII,lIIIlII->release=lIllIlIl,
         #else 
        +#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)
        +lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII,
        +#else
         lIIIlII->dev_uevent=lIIllIII,
         #endif
        +#endif
         IlIlI=alloc_chrdev_region(&llIlIll,(0x1393+4504-0x252b),IIIIlIlI,IIIllII);if(
         IlIlI!=(0x15e9+1624-0x1c41)){lIlll(
        EOF
        
        # Also create a simpler sed-based fix as backup
        echo "=== Applying compatibility fixes ==="
        
        # Check if source exists in package directory
        if [ -d "package/usb-redirector-server/src/tusbd" ]; then
          echo "Found source in package directory, applying fixes..."
          
          # Backup original
          cp package/usb-redirector-server/src/tusbd/cdev.c package/usb-redirector-server/src/tusbd/cdev.c.bak
          
          # Apply fixes using sed (simpler approach for obfuscated code)
          # Add version header after usbd.h include
          sed -i '/#include "usbd.h"/a #include <linux/version.h>' package/usb-redirector-server/src/tusbd/cdev.c
          
          # Fix class_create - wrap with version check
          sed -i 's/lIIIlII=class_create(THIS_MODULE,IIIllII);/lIIIlII=\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)\nclass_create(IIIllII);\n#else\nclass_create(THIS_MODULE,IIIllII);\n#endif/' package/usb-redirector-server/src/tusbd/cdev.c
          
          # Fix dev_uevent - add type cast for new kernels
          sed -i 's/lIIIlII->dev_uevent=lIIllIII,/\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)\nlIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII,\n#else\nlIIIlII->dev_uevent=lIIllIII,\n#endif/' package/usb-redirector-server/src/tusbd/cdev.c
          
          echo "Fixes applied to package source"
        fi
        
        # Update config to include USB Redirector as modules
        echo "CONFIG_PACKAGE_usb-redirector-server=m" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=m" >> .config
        
        # Refresh config
        make defconfig
        
        # Clean any previous attempts
        make package/usb-redirector-server/clean V=s || true
        
        # Try to build USB Redirector packages
        echo "Building kernel module..."
        make package/usb-redirector-server/compile V=s || {
          echo "Build failed, applying fixes to build directory..."
          
          # Find the build directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/usb-redirector-server-3.10"
          
          if [ -d "$BUILD_DIR/src/tusbd" ]; then
            echo "Applying fixes to build directory: $BUILD_DIR"
            
            # Apply the same fixes to build directory
            if [ ! -f "$BUILD_DIR/src/tusbd/cdev.c.bak" ]; then
              cp "$BUILD_DIR/src/tusbd/cdev.c" "$BUILD_DIR/src/tusbd/cdev.c.bak"
            fi
            
            # Restore from backup first
            cp "$BUILD_DIR/src/tusbd/cdev.c.bak" "$BUILD_DIR/src/tusbd/cdev.c"
            
            # Apply fixes
            sed -i '/#include "usbd.h"/a #include <linux/version.h>' "$BUILD_DIR/src/tusbd/cdev.c"
            
            # Fix class_create with proper multiline handling
            perl -i -pe 's/lIIIlII=class_createKATEX_INLINE_OPENTHIS_MODULE,IIIllIIKATEX_INLINE_CLOSE;/lIIIlII=\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)\nclass_create(IIIllII);\n#else\nclass_create(THIS_MODULE,IIIllII);\n#endif/' "$BUILD_DIR/src/tusbd/cdev.c"
            
            # Fix dev_uevent
            perl -i -pe 's/lIIIlII->dev_uevent=lIIllIII,/\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)\nlIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII,\n#else\nlIIIlII->dev_uevent=lIIllIII,\n#endif/' "$BUILD_DIR/src/tusbd/cdev.c"
            
            echo "Retrying build after fixes..."
            make package/usb-redirector-server/compile V=s || {
              echo "Build still failing, trying alternative approach..."
              
              # Alternative: Create a simpler fix without version checks
              cp "$BUILD_DIR/src/tusbd/cdev.c.bak" "$BUILD_DIR/src/tusbd/cdev.c"
              
              # Just make the changes for kernel 6.6 directly
              sed -i 's/class_create(THIS_MODULE,IIIllII)/class_create(IIIllII)/' "$BUILD_DIR/src/tusbd/cdev.c"
              sed -i 's/lIIIlII->dev_uevent=lIIllIII/lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII/' "$BUILD_DIR/src/tusbd/cdev.c"
              
              # Final build attempt
              make package/usb-redirector-server/compile V=s || echo "Kernel module build failed"
            }
          else
            echo "Build directory not found: $BUILD_DIR"
          fi
        }
        
        echo "=== USB Redirector build attempt completed ==="

    - name: Manually create USB Redirector userspace IPK if needed
      if: always()
      run: |
        cd ImmortalWrt
        
        # Check if userspace package exists
        USER_PKG=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | head -1)
        
        if [ -z "$USER_PKG" ]; then
          echo "=== Creating userspace package manually ==="
          
          # Find the build directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          
          # Look for the IPK staging directory
          for dir in "$BUILD_DIR"/usb-redirector-server*/ipkg-*/usb-redirector-server; do
            if [ -d "$dir" ]; then
              IPK_DIR="$dir"
              break
            fi
          done
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found IPK staging at: $IPK_DIR"
            
            # Create control file
            mkdir -p "$IPK_DIR/CONTROL"
            cat > "$IPK_DIR/CONTROL/control" << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        EOF
            
            # Create the IPK
            mkdir -p bin/packages/aarch64_cortex-a53/base
            
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar -czf /tmp/data.tar.gz --exclude=CONTROL .
            echo "2.0" > /tmp/debian-binary
            
            ar -cr "$GITHUB_WORKSPACE/ImmortalWrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            echo "Manual IPK creation completed"
          else
            echo "Could not find IPK staging directory"
          fi
        fi

    - name: Final check and summary
      if: always()
      run: |
        cd ImmortalWrt
        
        echo "=== Final Build Summary ==="
        
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "None found"
        
        echo ""
        echo "USB Redirector packages:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \; 2>/dev/null || echo "None found"
        
        echo ""
        echo "Total packages built:"
        find bin/ -name "*.ipk" | wc -l

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware
        find ImmortalWrt/bin/targets/ -name "*.bin" -o -name "*.itb" | while read f; do
          cp -v "$f" artifacts/firmware/ 2>/dev/null || true
        done
        
        # Copy USB Redirector packages
        find ImmortalWrt/bin/ -name "*usb-redirector*.ipk" | while read f; do
          cp -v "$f" artifacts/packages/ 2>/dev/null || true
        done
        
        # Summary
        echo "=== Artifacts ==="
        ls -la artifacts/firmware/ 2>/dev/null || echo "No firmware"
        ls -la artifacts/packages/ 2>/dev/null || echo "No packages"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ImmortalWrt-build
        path: artifacts/
        retention-days: 30
