name: Build ImmortalWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  ImmortalWrt_VERSION: v24.10.2
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 --branch ${{ env.ImmortalWrt_VERSION }} https://github.com/ImmortalWrt/ImmortalWrt.git
        cd ImmortalWrt
        echo "ImmortalWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd ImmortalWrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure ImmortalWrt for CMCC RAX3000M (without USB Redirector first)
      run: |
        cd ImmortalWrt
        
        # First build WITHOUT USB Redirector to ensure base system works
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_uhttpd=y
        CONFIG_PACKAGE_uhttpd-mod-ubus=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig
        
        echo "=== Configuration complete (without USB Redirector) ==="

    - name: Download package sources
      run: |
        cd ImmortalWrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base ImmortalWrt firmware (without USB Redirector)
      run: |
        cd ImmortalWrt
        
        echo "=== Building base ImmortalWrt firmware ==="
        
        # Build the base system first
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Check base build results
      run: |
        cd ImmortalWrt
        
        echo "=== Base build results ==="
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "No .bin files"
        
        echo ""
        echo "Packages built:"
        find bin/packages/ -name "*.ipk" | wc -l

    - name: Build USB Redirector packages separately
      run: |
        cd ImmortalWrt
        
        echo "=== Building USB Redirector packages separately ==="
        
        # First, apply kernel 6.6 compatibility fixes
        echo "=== Applying kernel 6.6 compatibility fixes ==="
        
        if [ -d "package/usb-redirector-server/src/tusbd" ]; then
          echo "Found source in package directory, applying kernel fixes..."
          
          # Backup original
          cp package/usb-redirector-server/src/tusbd/cdev.c package/usb-redirector-server/src/tusbd/cdev.c.bak 2>/dev/null || true
          
          # Apply fixes
          sed -i '/#include "usbd.h"/a #include <linux/version.h>' package/usb-redirector-server/src/tusbd/cdev.c
          sed -i 's/class_create(THIS_MODULE,IIIllII)/class_create(IIIllII)/' package/usb-redirector-server/src/tusbd/cdev.c
          sed -i 's/lIIIlII->dev_uevent=lIIllIII/lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII/' package/usb-redirector-server/src/tusbd/cdev.c
          
          echo "Kernel compatibility fixes applied"
        fi
        
        # Update config to include USB Redirector as modules
        echo "CONFIG_PACKAGE_usb-redirector-server=m" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=m" >> .config
        
        # Refresh config
        make defconfig
        
        # Clean any previous attempts
        make package/usb-redirector-server/clean V=s || true
        
        # Create a custom ipkg-build wrapper ONLY for usb-redirector
        echo "=== Creating custom build wrapper for USB Redirector ==="
        
        # Save original ipkg-build
        cp scripts/ipkg-build scripts/ipkg-build.backup
        
        # Create a wrapper that handles usb-redirector specially
        cat > scripts/ipkg-build << 'IPKG_SCRIPT'
        #!/bin/bash
        set -e
        
        # Get the real script path
        SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
        ORIG_SCRIPT="$SCRIPT_DIR/ipkg-build.backup"
        
        # Check if this is usb-redirector-server
        PKG_DIR=""
        PKG_NAME=""
        
        for arg in "$@"; do
          if [ -d "$arg" ] && [ -f "$arg/CONTROL/control" ]; then
            PKG_DIR="$arg"
            PKG_NAME=$(grep "^Package:" "$arg/CONTROL/control" 2>/dev/null | cut -d' ' -f2)
            break
          fi
        done
        
        # Special handling for usb-redirector-server
        if [ "$PKG_NAME" = "usb-redirector-server" ]; then
          echo "Special handling for usb-redirector-server package..."
          
          # Remove glibc dependencies from control file
          if [ -f "$PKG_DIR/CONTROL/control" ]; then
            # Create a temporary control file without glibc deps
            grep -v "libc\.so\|libm\.so\|libpthread\.so\|librt\.so" "$PKG_DIR/CONTROL/control" > "$PKG_DIR/CONTROL/control.tmp"
            mv "$PKG_DIR/CONTROL/control.tmp" "$PKG_DIR/CONTROL/control"
            
            # Ensure Depends line is correct
            if ! grep -q "^Depends:" "$PKG_DIR/CONTROL/control"; then
              echo "Depends: kmod-usb-redirector-server" >> "$PKG_DIR/CONTROL/control"
            fi
          fi
        fi
        
        # Call the original script
        exec "$ORIG_SCRIPT" "$@"
        IPKG_SCRIPT
        
        chmod +x scripts/ipkg-build
        
        # Try to build USB Redirector packages
        echo "Building USB Redirector packages..."
        make package/usb-redirector-server/compile V=s || {
          echo "First attempt failed, trying with build directory fixes..."
          
          # Restore original ipkg-build first
          mv scripts/ipkg-build.backup scripts/ipkg-build
          
          # Apply kernel fixes to build directory if needed
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/usb-redirector-server-3.10"
          
          if [ -d "$BUILD_DIR/src/tusbd" ] && [ -f "$BUILD_DIR/src/tusbd/cdev.c" ]; then
            echo "Applying kernel fixes to build directory..."
            
            if ! grep -q "linux/version.h" "$BUILD_DIR/src/tusbd/cdev.c"; then
              sed -i '/#include "usbd.h"/a #include <linux/version.h>' "$BUILD_DIR/src/tusbd/cdev.c"
              sed -i 's/class_create(THIS_MODULE,IIIllII)/class_create(IIIllII)/' "$BUILD_DIR/src/tusbd/cdev.c"
              sed -i 's/lIIIlII->dev_uevent=lIIllIII/lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII/' "$BUILD_DIR/src/tusbd/cdev.c"
            fi
          fi
          
          # Alternative approach: Modify the Makefile to remove library dependencies
          echo "Modifying Makefile to remove glibc dependencies..."
          
          if [ -f "package/usb-redirector-server/Makefile" ]; then
            # Create a modified Makefile
            cp package/usb-redirector-server/Makefile package/usb-redirector-server/Makefile.orig
            
            # Remove the problematic dependencies
            sed -i 's/DEPENDS:=+kmod-usb-redirector-server +librt +libstdcpp +libpthread/DEPENDS:=+kmod-usb-redirector-server/' package/usb-redirector-server/Makefile
            
            # Try building with modified Makefile
            make package/usb-redirector-server/compile V=s || {
              echo "Still failing, trying manual package creation..."
              
              # Restore original Makefile
              mv package/usb-redirector-server/Makefile.orig package/usb-redirector-server/Makefile
            }
          fi
        }
        
        # Always restore original ipkg-build at the end
        if [ -f "scripts/ipkg-build.backup" ]; then
          mv scripts/ipkg-build.backup scripts/ipkg-build
        fi
        
        echo "=== USB Redirector build attempt completed ==="

    - name: Manually create USB Redirector userspace IPK if needed
      if: always()
      run: |
        cd ImmortalWrt
        
        # Check if userspace package exists
        USER_PKG=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | head -1)
        
        if [ -z "$USER_PKG" ]; then
          echo "=== Creating userspace package manually ==="
          
          # Find the build directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          
          # Look for the IPK staging directory
          for dir in "$BUILD_DIR"/usb-redirector-server*/ipkg-*/usb-redirector-server; do
            if [ -d "$dir" ]; then
              IPK_DIR="$dir"
              break
            fi
          done
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found IPK staging at: $IPK_DIR"
            
            # Create control file
            mkdir -p "$IPK_DIR/CONTROL"
            cat > "$IPK_DIR/CONTROL/control" << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        EOF
            
            # Create the IPK
            mkdir -p bin/packages/aarch64_cortex-a53/base
            
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar -czf /tmp/data.tar.gz --exclude=CONTROL .
            echo "2.0" > /tmp/debian-binary
            
            ar -cr "$GITHUB_WORKSPACE/ImmortalWrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            echo "Manual IPK creation completed"
          else
            echo "Could not find IPK staging directory"
          fi
        fi

    - name: Final check and summary
      if: always()
      run: |
        cd ImmortalWrt
        
        echo "=== Final Build Summary ==="
        
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "None found"
        
        echo ""
        echo "USB Redirector packages:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \; 2>/dev/null || echo "None found"
        
        echo ""
        echo "Total packages built:"
        find bin/ -name "*.ipk" | wc -l

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware
        find ImmortalWrt/bin/targets/ -name "*.bin" -o -name "*.itb" | while read f; do
          cp -v "$f" artifacts/firmware/ 2>/dev/null || true
        done
        
        # Copy USB Redirector packages
        find ImmortalWrt/bin/ -name "*usb-redirector*.ipk" | while read f; do
          cp -v "$f" artifacts/packages/ 2>/dev/null || true
        done
        
        # Summary
        echo "=== Artifacts ==="
        ls -la artifacts/firmware/ 2>/dev/null || echo "No firmware"
        ls -la artifacts/packages/ 2>/dev/null || echo "No packages"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ImmortalWrt-build
        path: artifacts/
        retention-days: 30
