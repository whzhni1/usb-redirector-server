name: Build OpenWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v23.05.3
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Copy USB Redirector package to OpenWrt
      run: |
        echo "Copying USB Redirector Server package to OpenWrt package directory..."
        cp -r usb-redirector-server openwrt/package/
        
        # Fix Makefile tabs if needed
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile

    - name: Create safe ipkg-build wrapper
      run: |
        cd openwrt
        
        # Backup original ipkg-build
        cp scripts/ipkg-build scripts/ipkg-build.original
        
        # Create a wrapper that only modifies behavior for usb-redirector-server
        cat > scripts/ipkg-build << 'WRAPPER_END'
        #!/bin/bash
        set -e
        
        # Get the directory being packaged
        pkg_dir=""
        for arg in "$@"; do
          if [ -d "$arg" ] && [ -z "$pkg_dir" ]; then
            pkg_dir="$arg"
            break
          fi
        done
        
        # Check if this is usb-redirector-server
        if [ -n "$pkg_dir" ] && [ -f "$pkg_dir/CONTROL/control" ]; then
          pkg_name=$(grep "^Package:" "$pkg_dir/CONTROL/control" | cut -d' ' -f2)
          
          if [ "$pkg_name" = "usb-redirector-server" ]; then
            echo "Special handling for usb-redirector-server package..."
            
            # Clean the control file
            sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$pkg_dir/CONTROL/control"
            
            # Build the package manually
            dest_dir=""
            file_modes=""
            
            # Parse arguments
            while [ "$#" -gt 0 ]; do
              case "$1" in
                -m) file_modes="$2"; shift 2 ;;
                -*) shift ;;
                *)
                  if [ "$1" != "$pkg_dir" ] && [ -z "$dest_dir" ]; then
                    dest_dir="$1"
                  fi
                  shift
                  ;;
              esac
            done
            
            [ -z "$dest_dir" ] && dest_dir="."
            
            # Get package info
            version=$(grep "^Version:" "$pkg_dir/CONTROL/control" | cut -d' ' -f2)
            arch=$(grep "^Architecture:" "$pkg_dir/CONTROL/control" | cut -d' ' -f2)
            
            # Build IPK
            pkg_file="$dest_dir/${pkg_name}_${version}_${arch}.ipk"
            tmp_dir=$(mktemp -d)
            
            echo "2.0" > "$tmp_dir/debian-binary"
            (cd "$pkg_dir/CONTROL" && tar -czf "$tmp_dir/control.tar.gz" .)
            (cd "$pkg_dir" && tar --exclude='./CONTROL' -czf "$tmp_dir/data.tar.gz" .)
            (cd "$tmp_dir" && ar -cr "$pkg_file" debian-binary control.tar.gz data.tar.gz)
            
            rm -rf "$tmp_dir"
            echo "Packaged contents of $pkg_dir into $pkg_file"
            exit 0
          fi
        fi
        
        # For all other packages, use the original ipkg-build
        exec scripts/ipkg-build.original "$@"
        WRAPPER_END
        
        chmod +x scripts/ipkg-build

    - name: Configure OpenWrt for CMCC RAX3000M
      run: |
        cd openwrt
        
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # USB Redirector Server - build as modules for IPK
        CONFIG_PACKAGE_usb-redirector-server=m
        CONFIG_PACKAGE_kmod-usb-redirector-server=m
        
        # Required libraries
        CONFIG_PACKAGE_libgcc=y
        CONFIG_PACKAGE_librt=y
        CONFIG_PACKAGE_libpthread=y
        CONFIG_PACKAGE_libstdcpp=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_uhttpd=y
        CONFIG_PACKAGE_uhttpd-mod-ubus=y
        
        # Filesystem support
        CONFIG_PACKAGE_kmod-fs-ext4=y
        CONFIG_PACKAGE_kmod-fs-vfat=y
        CONFIG_PACKAGE_kmod-nls-cp437=y
        CONFIG_PACKAGE_kmod-nls-iso8859-1=y
        CONFIG_PACKAGE_kmod-nls-utf8=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        
        echo "Starting OpenWrt build..."
        
        # Build everything
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "Build completed"

    - name: Check and fix USB Redirector packages
      if: always()
      run: |
        cd openwrt
        
        echo "=== Checking built packages ==="
        
        # Check what was built
        KMOD_COUNT=$(find bin/ -name "kmod-usb-redirector-server*.ipk" 2>/dev/null | wc -l)
        USER_COUNT=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | wc -l)
        
        echo "Found $KMOD_COUNT kernel module package(s)"
        echo "Found $USER_COUNT userspace package(s)"
        
        # If userspace package is missing, try to build it separately
        if [ "$USER_COUNT" -eq 0 ]; then
          echo "Userspace package missing, attempting separate build..."
          
          # Try to build just the USB redirector packages
          make package/usb-redirector-server/clean V=s
          make package/usb-redirector-server/compile V=s || {
            echo "Separate build also failed, creating manually..."
            
            # Manual creation as last resort
            BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
            
            # Find the IPK staging directory
            IPK_DIR=""
            for dir in "$BUILD_DIR"/usb-redirector-server*/ipkg-*/usb-redirector-server; do
              if [ -d "$dir" ]; then
                IPK_DIR="$dir"
                break
              fi
            done
            
            if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
              echo "Found IPK staging at: $IPK_DIR"
              
              # Ensure control file exists
              mkdir -p "$IPK_DIR/CONTROL"
              if [ ! -f "$IPK_DIR/CONTROL/control" ]; then
                cat > "$IPK_DIR/CONTROL/control" << CONTROL_EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        CONTROL_EOF
              fi
              
              # Clean dependencies
              sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$IPK_DIR/CONTROL/control"
              
              # Build the IPK
              mkdir -p bin/packages/aarch64_cortex-a53/base
              ./scripts/ipkg-build -m "" "$IPK_DIR" bin/packages/aarch64_cortex-a53/base/
            fi
          }
        fi
        
        # Final check
        echo ""
        echo "=== Final package list ==="
        find bin/ -name "*usb-redirector*.ipk" -ls

    - name: Organize artifacts
      if: always()
      run: |
        # Create artifact directories
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware images
        if [ -d "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}" ]; then
          find "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}" \
            -name "*.bin" -o -name "*.itb" -o -name "*.img.gz" | \
            while read f; do
              cp -v "$f" artifacts/firmware/
            done
        fi
        
        # Copy USB Redirector IPK packages
        find openwrt/bin/ -name "*usb-redirector*.ipk" 2>/dev/null | \
          while read f; do
            cp -v "$f" artifacts/packages/
          done
        
        # Create documentation
        cat > artifacts/README.md << 'README_EOF'
        # OpenWrt Build for CMCC RAX3000M with USB Redirector
        
        ## Build Information
        - Date: $(date)
        - OpenWrt Version: ${{ env.OPENWRT_VERSION }}
        - Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
        - Device: CMCC RAX3000M
        
        ## Package Contents
        
        ### Firmware Images (firmware/)
        Complete OpenWrt firmware for CMCC RAX3000M
        
        ### IPK Packages (packages/)
        - `kmod-usb-redirector-server*.ipk` - Kernel module
        - `usb-redirector-server*.ipk` - Userspace utilities
        
        ## Installation Instructions
        
        ### Option 1: Flash Complete Firmware
        1. Access router web interface (http://192.168.1.1)
        2. Go to System -> Backup/Flash Firmware
        3. Upload firmware file and flash
        
        ### Option 2: Install IPK Packages
        ```bash
        # Transfer files to router
        scp packages/*.ipk root@192.168.1.1:/tmp/
        
        # SSH to router and install
        ssh root@192.168.1.1
        cd /tmp
        opkg install kmod-usb-redirector-server*.ipk
        opkg install usb-redirector-server*.ipk
        
        # Start service
        /etc/init.d/usbsrvd start
        /etc/init.d/usbsrvd enable
        ```
        
        ## Configuration
        Edit `/etc/usbsrvd.conf` to configure the USB Redirector Server.
        README_EOF
        
        # Show summary
        echo "=== Build Summary ==="
        echo "Firmware files: $(find artifacts/firmware -name "*.bin" -o -name "*.itb" 2>/dev/null | wc -l)"
        echo "IPK packages: $(find artifacts/packages -name "*.ipk" 2>/dev/null | wc -l)"
        ls -la artifacts/packages/*.ipk 2>/dev/null || echo "No packages found"

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: firmware-cmcc-rax3000m
        path: artifacts/firmware/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload IPK packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-ipk-packages
        path: artifacts/packages/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload complete build
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-build
        path: artifacts/
        retention-days: 30
