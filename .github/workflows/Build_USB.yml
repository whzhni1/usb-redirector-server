name: Build OpenWrt with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      device:
        description: 'Device Profile'
        required: false
        default: 'cmcc_rax3000m'

env:
  OPENWRT_VERSION: main
  DEVICE_PROFILE: ${{ github.event.inputs.device || 'cmcc_rax3000m' }}
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          python3-pyelftools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt version: $(git rev-parse HEAD)"
        
        # Check kernel version
        echo "Checking kernel version..."
        KERNEL_VER=$(ls include/kernel-* 2>/dev/null | sed 's/.*kernel-//' | head -1)
        echo "Kernel version detected: $KERNEL_VER"
        echo "KERNEL_VERSION=$KERNEL_VER" >> $GITHUB_ENV

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure OpenWrt for CMCC RAX3000M
      run: |
        cd openwrt
        
        cat > .config << 'CONFIG_EOF'
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Package manager
        CONFIG_PACKAGE_opkg=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi for MT7981
        CONFIG_PACKAGE_kmod-mt7981-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        CONFIG_EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base OpenWrt firmware
      run: |
        cd openwrt
        
        echo "=== Building base OpenWrt firmware ==="
        
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Copy USB Redirector package to OpenWrt
      run: |
        echo "=== Preparing USB Redirector Server package ==="
        
        # Copy package to OpenWrt
        cp -r usb-redirector-server openwrt/package/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile
        
        # Create patches directory
        mkdir -p openwrt/package/usb-redirector-server/patches

    - name: Create kernel compatibility patch
      run: |
        cd openwrt/package/usb-redirector-server/patches
        
        # Create the patch file using a different approach to avoid here-document issues
        cat > 001-kernel-6.12-compat.patch << 'PATCH_EOF'
--- a/src/tusbd/cdev.c
+++ b/src/tusbd/cdev.c
@@ -9,6 +9,7 @@
 
 #include <linux/device.h>
 #include <linux/mutex.h>
+#include <linux/version.h>
 #include <linux/cdev.h>
 #include "usbd.h"
 #include "cdev.h"
@@ -17,6 +18,10 @@
 
 #include "public_devices.h"
 
+/* Forward declarations to fix -Wmissing-prototypes */
+static int lIllIllIl(struct IIIlll*lllll,int llIllI);
+static void lIlllllll(struct IIIlll*lllll,int llIllI);
+
 static struct class*lIIIlII;static DEFINE_MUTEX(lIIIlIl);static int lIIIllI;struct 
 lIlIllI{int lIIlIlI;dev_t IIIIll;struct cdev llIlII;struct IIIlll lllll;};static 
 struct lIlIllI lllIlI[(0x0000000F+0x00000FF1+0x00000001-0x00001000)];static int 
@@ -40,7 +45,11 @@
 );
 do{
 mutex_init(&lIIIlIl);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)
+lIIIlII=class_create(IIIllII);
+#else
 lIIIlII=class_create(THIS_MODULE,IIIllII);
+#endif
 if(lIIIlII==
 
 NULL||IS_ERR(lIIIlII)){lIlIlI(
@@ -49,7 +58,11 @@
 ,lIIIlII);return PTR_ERR(lIIIlII);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,0,0)
+lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII;
+#else
 lIIIlII->dev_uevent=lIIllIII,
+#endif
 
 0;if(IIIlllIl()){if(lIIIlII){
 class_destroy(lIIIlII),lIIIlII=
@@ -119,7 +132,7 @@
 
 0;return(0x00000000+0x00000000+0x00000000-0x00000000);
 }
-int lIllIllIl(struct IIIlll*lllll,int llIllI){
+static int lIllIllIl(struct IIIlll*lllll,int llIllI){
 struct lIlIllI*lIlllI=&lllIlI[lllll->llllI];if(!lIlllI->lIIlIlI){int IIIllI;
 IIIllI=alloc_chrdev_region(&lIlllI->IIIIll,
 (0x00000000+0x00000000+0x00000000-0x00000000),
@@ -156,7 +169,7 @@
 (0x00000000+0x00000000+0x00000000-0x00000000);
 }
 
-void lIlllllll(struct IIIlll*lllll,int llIllI){if(lllll->dev){
+static void lIlllllll(struct IIIlll*lllll,int llIllI){if(lllll->dev){
 struct lIlIllI*lIlllI=&lllIlI[lllll->llllI];lIlllI->lIIlIlI=(0x00000000+0x00000000+0x00000000-0x00000000);device_unregister(lllll->dev);
 lllll->dev=
PATCH_EOF
        
        echo "Kernel compatibility patch created"
        ls -la ../patches/

    - name: Build USB Redirector packages
      run: |
        cd openwrt
        
        echo "=== Building USB Redirector packages ==="
        
        # Update config
        echo "CONFIG_PACKAGE_usb-redirector-server=m" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=m" >> .config
        
        make defconfig
        
        # Clean and build
        make package/usb-redirector-server/clean V=s || true
        
        echo "Building packages with kernel compatibility patches..."
        make package/usb-redirector-server/compile V=s || {
          echo "Build failed, checking logs..."
          find logs -name "*usb-redirector*" -exec cat {} \; 2>/dev/null || true
        }

    - name: Check and list all build outputs
      if: always()
      run: |
        echo "=== Checking build outputs ==="
        
        echo ""
        echo "=== Firmware files ==="
        if [ -d "openwrt/bin/targets" ]; then
          find openwrt/bin/targets/ -type f \( -name "*.bin" -o -name "*.itb" -o -name "*.img" -o -name "*.ubi" \) 2>/dev/null | while read f; do
            echo "Firmware: $(basename $f) - $(ls -lh $f | awk '{print $5}')"
          done
        else
          echo "No firmware directory found"
        fi
        
        echo ""
        echo "=== USB Redirector packages ==="
        find openwrt/bin/ -type f -name "*usb-redirector*.ipk" 2>/dev/null | while read f; do
          echo "USB Package: $(basename $f) - $(ls -lh $f | awk '{print $5}')"
        done || echo "No USB Redirector packages found"

    - name: Prepare artifacts for upload
      if: always()
      run: |
        echo "=== Preparing artifacts ==="
        
        # Create artifact directories
        mkdir -p upload-artifacts/firmware
        mkdir -p upload-artifacts/packages
        
        # Copy firmware files
        if [ -d "openwrt/bin/targets" ]; then
          find openwrt/bin/targets/ -type f \( -name "*cmcc*.bin" -o -name "*sysupgrade*.bin" -o -name "*factory*.bin" \) 2>/dev/null | while read f; do
            cp -v "$f" upload-artifacts/firmware/ || true
          done
        fi
        
        # Copy USB Redirector packages
        find openwrt/bin/ -type f -name "*usb-redirector*.ipk" 2>/dev/null | while read f; do
          cp -v "$f" upload-artifacts/packages/ || true
        done
        
        # Create build info
        cat > upload-artifacts/BUILD_INFO.txt << 'INFO_EOF'
Build Information
=================
Build Date: $(date)
OpenWrt Branch: ${{ env.OPENWRT_VERSION }}
Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
Device: ${{ env.DEVICE_PROFILE }}

Contents:
---------
Firmware files: $(ls -1 upload-artifacts/firmware/ 2>/dev/null | wc -l) files
USB Redirector packages: $(ls -1 upload-artifacts/packages/ 2>/dev/null | wc -l) files
INFO_EOF
        
        echo ""
        echo "=== Final upload structure ==="
        ls -laR upload-artifacts/

    - name: Upload firmware images
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: firmware-${{ env.DEVICE_PROFILE }}
        path: upload-artifacts/firmware/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload USB Redirector packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-packages
        path: upload-artifacts/packages/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: all-build-artifacts
        path: upload-artifacts/
        retention-days: 30
        if-no-files-found: warn
