name: Build OpenWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: main  # 24.10开发版
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          python3-pyelftools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure OpenWrt for CMCC RAX3000M (without USB Redirector first)
      run: |
        cd openwrt
        
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7981-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base OpenWrt firmware (without USB Redirector)
      run: |
        cd openwrt
        
        echo "=== Building base OpenWrt firmware ==="
        
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Check base build results
      run: |
        cd openwrt
        
        echo "=== Base build results ==="
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "No .bin files"
        
        echo ""
        echo "Packages built:"
        find bin/packages/ -name "*.ipk" | wc -l

    - name: Copy and patch USB Redirector package for kernel 6.12
      run: |
        echo "=== Adding and patching USB Redirector Server package ==="
        
        # Copy package to OpenWrt
        cp -r usb-redirector-server openwrt/package/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile
        
        # Create kernel compatibility patch for kernel 6.12
        cat > openwrt/package/usb-redirector-server/patches/001-kernel-6.12-compat.patch << 'PATCH_EOF'
        --- a/src/tusbd/cdev.c
        +++ b/src/tusbd/cdev.c
        @@ -40,7 +40,11 @@
         );
         do{
         mutex_init(&lIIIlIl);
        +#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,0)
        +lIIIlII=class_create(IIIllII);
        +#else
         lIIIlII=class_create(THIS_MODULE,IIIllII);
        +#endif
         if(lIIIlII==
         
         NULL||IS_ERR(lIIIlII)){lIlIlI(
        @@ -49,7 +53,11 @@
         ,lIIIlII);return PTR_ERR(lIIIlII);
         }
         
        +#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,0,0)
        +lIIIlII->dev_uevent=(int (*)(const struct device *, struct kobj_uevent_env *))lIIllIII,
        +#else
         lIIIlII->dev_uevent=lIIllIII,
        +#endif
         
         0;if(IIIlllIl()){if(lIIIlII){
         class_destroy(lIIIlII),lIIIlII=
        PATCH_EOF
        
        # Apply the patch
        cd openwrt/package/usb-redirector-server
        mkdir -p patches
        cd ../../..
        
        echo "Package patched for kernel 6.12 compatibility"

    - name: Build USB Redirector packages separately (skip kernel module if fails)
      run: |
        cd openwrt
        
        echo "=== Building USB Redirector packages ==="
        
        # Update config to include USB Redirector as modules
        echo "CONFIG_PACKAGE_usb-redirector-server=m" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=m" >> .config
        
        # Refresh config
        make defconfig
        
        # Clean any previous attempts
        make package/usb-redirector-server/clean V=s || true
        
        # Try to build USB Redirector packages
        echo "Building packages..."
        make package/usb-redirector-server/compile V=s || {
          echo "Kernel module build failed (expected for kernel 6.12), building userspace only..."
          
          # If kernel module fails, at least build userspace package
          # Remove kernel module requirement
          sed -i 's/+kmod-usb-redirector-server//' openwrt/package/usb-redirector-server/Makefile
          
          # Retry with userspace only
          make package/usb-redirector-server/clean V=s || true
          make package/usb-redirector-server/compile V=s || echo "Userspace also failed"
        }

    - name: Manually create userspace IPK package
      if: always()
      run: |
        cd openwrt
        
        echo "=== Creating userspace package manually (kernel module may not be compatible) ==="
        
        # Find the build directory
        BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
        
        # Create IPK staging directory manually if needed
        IPK_DIR="$BUILD_DIR/usb-redirector-server-3.10/ipkg-aarch64_cortex-a53/usb-redirector-server"
        mkdir -p "$IPK_DIR/usr/bin"
        mkdir -p "$IPK_DIR/usr/sbin"
        mkdir -p "$IPK_DIR/etc/init.d"
        mkdir -p "$IPK_DIR/CONTROL"
        
        # Copy files from package source
        if [ -d "package/usb-redirector-server/files" ]; then
          cp -r package/usb-redirector-server/files/bin/aarch64-muslhf/usbsrv "$IPK_DIR/usr/bin/" 2>/dev/null || \
            cp -r package/usb-redirector-server/files/bin/aarch64-gnueabi/usbsrv "$IPK_DIR/usr/bin/" 2>/dev/null || true
          cp -r package/usb-redirector-server/files/bin/aarch64-muslhf/usbsrvd-srv "$IPK_DIR/usr/sbin/usbsrvd" 2>/dev/null || \
            cp -r package/usb-redirector-server/files/bin/aarch64-gnueabi/usbsrvd-srv "$IPK_DIR/usr/sbin/usbsrvd" 2>/dev/null || true
          cp package/usb-redirector-server/files/usbsrvd.conf "$IPK_DIR/etc/" 2>/dev/null || true
          cp package/usb-redirector-server/files/usbsrvd.init "$IPK_DIR/etc/init.d/usbsrvd" 2>/dev/null || true
        fi
        
        # Create control file (without kernel module dependency for now)
        cat > "$IPK_DIR/CONTROL/control" << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Description: USB Redirector Server userspace utilities (kernel module may need manual compilation)
        EOF
        
        # Create the IPK
        if [ -f "$IPK_DIR/usr/bin/usbsrv" ] || [ -f "$IPK_DIR/usr/sbin/usbsrvd" ]; then
          mkdir -p bin/packages/aarch64_cortex-a53/base
          
          cd "$IPK_DIR"
          tar -czf /tmp/control.tar.gz -C CONTROL .
          tar -czf /tmp/data.tar.gz --exclude=CONTROL .
          echo "2.0" > /tmp/debian-binary
          
          ar -cr "$GITHUB_WORKSPACE/openwrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
            /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
          
          echo "Userspace IPK created successfully"
          cd "$GITHUB_WORKSPACE/openwrt"
        else
          echo "Could not find userspace binaries"
        fi

    - name: Final check and summary
      if: always()
      run: |
        cd openwrt
        
        echo "=== Final Build Summary ==="
        
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "None found"
        
        echo ""
        echo "USB Redirector packages:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \; 2>/dev/null || echo "None found"
        
        echo ""
        echo "Note: Kernel module may not be compatible with kernel 6.12. Userspace utilities should work."
        echo "Total packages built:"
        find bin/ -name "*.ipk" | wc -l

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware
        find openwrt/bin/targets/ -name "*.bin" -o -name "*.itb" | while read f; do
          cp -v "$f" artifacts/firmware/ 2>/dev/null || true
        done
        
        # Copy USB Redirector packages
        find openwrt/bin/ -name "*usb-redirector*.ipk" | while read f; do
          cp -v "$f" artifacts/packages/ 2>/dev/null || true
        done
        
        # Create note about kernel compatibility
        cat > artifacts/KERNEL_COMPATIBILITY.txt << EOF
        Note: OpenWrt 24.10 uses kernel 6.12 which has API changes that break
        the USB Redirector kernel module compilation.
        
        The userspace utilities package has been created, but the kernel module
        (kmod-usb-redirector-server) may not be available.
        
        To use USB Redirector on OpenWrt 24.10, you may need to:
        1. Use OpenWrt 23.05.3 instead (recommended, fully working)
        2. Wait for USB Redirector to update their kernel module for kernel 6.x
        3. Manually patch the kernel module source code
        EOF
        
        echo "=== Artifacts ==="
        ls -la artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: openwrt-build
        path: artifacts/
        retention-days: 30
