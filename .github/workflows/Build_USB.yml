name: Build OpenWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v23.05.3
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Copy USB Redirector package to OpenWrt
      run: |
        echo "Copying USB Redirector Server package to OpenWrt package directory..."
        cp -r usb-redirector-server openwrt/package/
        
        # Fix Makefile tabs if needed
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile

    - name: Create ipkg-build wrapper with correct paths
      run: |
        cd openwrt
        
        # Get the absolute path to OpenWrt directory
        OPENWRT_DIR=$(pwd)
        
        # Backup original ipkg-build
        cp scripts/ipkg-build scripts/ipkg-build.original
        
        # Create a wrapper with absolute paths
        cat > scripts/ipkg-build << WRAPPER_END
        #!/bin/bash
        set -e
        
        # Absolute path to original script
        ORIGINAL_SCRIPT="${OPENWRT_DIR}/scripts/ipkg-build.original"
        
        # Get the directory being packaged
        pkg_dir=""
        dest_dir=""
        file_modes=""
        other_args=""
        
        while [ "\$#" -gt 0 ]; do
          case "\$1" in
            -m) 
              file_modes="\$2"
              other_args="\$other_args -m \$2"
              shift 2
              ;;
            -*)
              other_args="\$other_args \$1"
              shift
              ;;
            *)
              if [ -d "\$1" ] && [ -z "\$pkg_dir" ]; then
                pkg_dir="\$1"
              elif [ -z "\$dest_dir" ]; then
                dest_dir="\$1"
              fi
              shift
              ;;
          esac
        done
        
        # Check if this is usb-redirector-server
        if [ -n "\$pkg_dir" ] && [ -f "\$pkg_dir/CONTROL/control" ]; then
          pkg_name=\$(grep "^Package:" "\$pkg_dir/CONTROL/control" | cut -d' ' -f2)
          
          if [ "\$pkg_name" = "usb-redirector-server" ]; then
            echo "Special handling for usb-redirector-server package..."
            
            # Clean the control file
            sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "\$pkg_dir/CONTROL/control"
            
            # Get package info
            version=\$(grep "^Version:" "\$pkg_dir/CONTROL/control" | cut -d' ' -f2)
            arch=\$(grep "^Architecture:" "\$pkg_dir/CONTROL/control" | cut -d' ' -f2)
            
            [ -z "\$dest_dir" ] && dest_dir="."
            
            # Build IPK manually
            pkg_file="\$dest_dir/\${pkg_name}_\${version}_\${arch}.ipk"
            tmp_dir=\$(mktemp -d)
            
            echo "2.0" > "\$tmp_dir/debian-binary"
            (cd "\$pkg_dir/CONTROL" && tar -czf "\$tmp_dir/control.tar.gz" .)
            (cd "\$pkg_dir" && tar --exclude='./CONTROL' -czf "\$tmp_dir/data.tar.gz" .)
            (cd "\$tmp_dir" && ar -cr "\$pkg_file" debian-binary control.tar.gz data.tar.gz)
            
            rm -rf "\$tmp_dir"
            echo "Packaged contents of \$pkg_dir into \$pkg_file"
            exit 0
          fi
        fi
        
        # For all other packages, use the original ipkg-build
        exec "\$ORIGINAL_SCRIPT" \$other_args "\$pkg_dir" "\$dest_dir"
        WRAPPER_END
        
        chmod +x scripts/ipkg-build
        
        echo "ipkg-build wrapper created with OPENWRT_DIR=$OPENWRT_DIR"

    - name: Configure OpenWrt for CMCC RAX3000M
      run: |
        cd openwrt
        
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # USB Redirector Server - build as modules
        CONFIG_PACKAGE_usb-redirector-server=m
        CONFIG_PACKAGE_kmod-usb-redirector-server=m
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_uhttpd=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        
        echo "Starting OpenWrt build..."
        
        # Build everything - this should now work with our wrapper
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "Build completed"

    - name: Verify USB Redirector packages
      if: always()
      run: |
        cd openwrt
        
        echo "=== Checking for USB Redirector packages ==="
        
        # Count packages
        KMOD_COUNT=$(find bin/ -name "kmod-usb-redirector-server*.ipk" 2>/dev/null | wc -l)
        USER_COUNT=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | wc -l)
        
        echo "Kernel module packages: $KMOD_COUNT"
        echo "Userspace packages: $USER_COUNT"
        
        # List all USB redirector packages
        echo ""
        echo "Package list:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \;
        
        # If userspace package is still missing, create it manually
        if [ "$USER_COUNT" -eq 0 ]; then
          echo ""
          echo "WARNING: Userspace package not found, attempting manual creation..."
          
          # Find the staging directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          IPK_DIR=$(find "$BUILD_DIR" -type d -path "*/usb-redirector-server*/ipkg-*/usb-redirector-server" 2>/dev/null | head -1)
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found staging directory: $IPK_DIR"
            
            # Create minimal control file if needed
            mkdir -p "$IPK_DIR/CONTROL"
            cat > "$IPK_DIR/CONTROL/control" << CONTROL_EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        CONTROL_EOF
            
            # Build the package
            mkdir -p bin/packages/aarch64_cortex-a53/base
            
            # Create IPK manually using tar and ar
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar -czf /tmp/data.tar.gz --exclude=CONTROL .
            echo "2.0" > /tmp/debian-binary
            
            ar -cr "$GITHUB_WORKSPACE/openwrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            cd "$GITHUB_WORKSPACE/openwrt"
            echo "Manual package creation completed"
          else
            echo "ERROR: Could not find IPK staging directory"
          fi
        fi

    - name: Organize artifacts
      if: always()
      run: |
        # Create artifact directories
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware images
        if [ -d "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}" ]; then
          find "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}" \
            \( -name "*cmcc-rax3000m*.bin" -o -name "*.itb" \) \
            -exec cp -v {} artifacts/firmware/ \;
        fi
        
        # Copy USB Redirector packages
        find openwrt/bin/ -name "*usb-redirector*.ipk" 2>/dev/null | \
          while read pkg; do
            cp -v "$pkg" artifacts/packages/
          done
        
        # Create README
        cat > artifacts/README.md << 'EOF'
        # OpenWrt Build for CMCC RAX3000M with USB Redirector
        
        ## Build Information
        - Date: $(date)
        - OpenWrt Version: ${{ env.OPENWRT_VERSION }}
        - Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
        
        ## Installation
        
        ### For IPK packages:
        1. Copy to router: `scp packages/*.ipk root@192.168.1.1:/tmp/`
        2. Install kernel module: `opkg install kmod-usb-redirector-server*.ipk`
        3. Install userspace: `opkg install usb-redirector-server*.ipk`
        4. Start service: `/etc/init.d/usbsrvd start && /etc/init.d/usbsrvd enable`
        
        ### For firmware:
        Flash through web interface or recovery mode.
        EOF
        
        # Summary
        echo "=== Build Summary ==="
        echo "Firmware: $(ls artifacts/firmware/*.bin 2>/dev/null | wc -l) files"
        echo "Packages: $(ls artifacts/packages/*.ipk 2>/dev/null | wc -l) files"
        ls -lah artifacts/packages/*.ipk 2>/dev/null || echo "No packages found"

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: firmware-cmcc-rax3000m
        path: artifacts/firmware/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload IPK packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-ipk-packages
        path: artifacts/packages/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload complete build
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-build
        path: artifacts/
        retention-days: 30
