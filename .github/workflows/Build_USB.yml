name: Build USB Redirector Server for OpenWrt

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt Target'
        required: false
        default: 'mediatek'
      subtarget:
        description: 'OpenWrt Subtarget'
        required: false
        default: 'filogic'

env:
  OPENWRT_VERSION: v23.05.3
  TARGET: ${{ github.event.inputs.target || 'mediatek' }}
  SUBTARGET: ${{ github.event.inputs.subtarget || 'filogic' }}

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt commit: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Prepare USB Redirector package
      run: |
        # Create package directory in OpenWrt
        mkdir -p openwrt/package/usb-redirector-server
        
        # Copy all files preserving structure
        cp -r Makefile openwrt/package/usb-redirector-server/
        cp -r src openwrt/package/usb-redirector-server/
        cp -r files openwrt/package/usb-redirector-server/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile

    - name: Replace ipkg-build with custom version
      run: |
        cd openwrt
        
        # Backup original
        cp scripts/ipkg-build scripts/ipkg-build.original
        
        # Create completely new ipkg-build that skips library checks
        cat > scripts/ipkg-build << 'IPKG_SCRIPT'
        #!/bin/bash
        set -e
        
        version=1.0
        FIND="${FIND:-$(which find)}"
        TAR="${TAR:-$(which tar)}"
        
        # Function to check if package is usb-redirector-server
        is_usb_redirector() {
          echo "$1" | grep -q "usb-redirector-server"
        }
        
        # Parse options
        file_modes=""
        while [[ $# -gt 0 ]] && [[ "$1" = -* ]]; do
          case "$1" in
            -c) ;; # Ignored
            -C) shift ;; # Ignored  
            -m) file_modes="$2"; shift ;;
            -o) shift ;; # Ignored
            -O) shift ;; # Ignored
            *) echo "Unknown option: $1" >&2; exit 1 ;;
          esac
          shift
        done
        
        pkg_dir="$1"
        dest_dir="${2:-.}"
        
        if [ ! -d "$pkg_dir" ]; then
          echo "Error: Directory $pkg_dir does not exist" >&2
          exit 1
        fi
        
        # Get package info
        control_file="$pkg_dir/CONTROL/control"
        if [ ! -f "$control_file" ]; then
          echo "Error: $control_file not found" >&2
          exit 1
        fi
        
        name=$(grep "^Package:" "$control_file" | sed 's/Package:[[:space:]]*//')
        version=$(grep "^Version:" "$control_file" | sed 's/Version:[[:space:]]*//')
        arch=$(grep "^Architecture:" "$control_file" | sed 's/Architecture:[[:space:]]*//')
        
        # Check for required fields
        if [ -z "$name" ] || [ -z "$version" ] || [ -z "$arch" ]; then
          echo "Error: Missing required fields in control file" >&2
          exit 1
        fi
        
        # Clean up CVS directories etc
        find "$pkg_dir" -name 'CVS' -o -name '.svn' -o -name '.#*' -o -name '*~' | xargs -r rm -rf
        
        # Skip library checks for usb-redirector-server
        if ! is_usb_redirector "$name"; then
          # Check for missing library dependencies (normal packages)
          missing_deps=""
          for file in $(find "$pkg_dir" -type f \( -perm /111 -o -name "*.so*" \) 2>/dev/null); do
            if file "$file" 2>/dev/null | grep -q "ELF"; then
              libs=$(objdump -p "$file" 2>/dev/null | grep NEEDED | awk '{print $2}')
              for lib in $libs; do
                if [[ "$lib" == "libc.so.6" ]] || [[ "$lib" == "libm.so.6" ]] || \
                   [[ "$lib" == "libpthread.so.0" ]] || [[ "$lib" == "librt.so.1" ]]; then
                  if [ ! -e "$pkg_dir/lib/$lib" ] && [ ! -e "$pkg_dir/usr/lib/$lib" ]; then
                    missing_deps="$missing_deps $lib"
                  fi
                fi
              done
            fi
          done
          
          if [ -n "$missing_deps" ]; then
            echo "Package $name is missing dependencies for the following libraries:"
            for lib in $missing_deps; do
              echo "$lib"
            done
            exit 1
          fi
        else
          echo "Skipping library dependency check for $name"
          
          # Clean up control file for usb-redirector-server
          if [ -f "$control_file" ]; then
            grep -v "libc\.so\|libm\.so\|libpthread\.so\|librt\.so" "$control_file" > "${control_file}.tmp"
            mv "${control_file}.tmp" "$control_file"
          fi
        fi
        
        # Create package
        pkg_file="${dest_dir}/${name}_${version}_${arch}.ipk"
        
        # Create temporary directory
        tmp_dir=$(mktemp -d)
        trap "rm -rf $tmp_dir" EXIT
        
        # Create debian-binary
        echo "2.0" > "$tmp_dir/debian-binary"
        
        # Create control.tar.gz
        (cd "$pkg_dir/CONTROL" && tar -czf "$tmp_dir/control.tar.gz" .)
        
        # Create data.tar.gz  
        (cd "$pkg_dir" && tar --exclude='./CONTROL' -czf "$tmp_dir/data.tar.gz" .)
        
        # Create IPK
        (cd "$tmp_dir" && ar -cr "$pkg_file" debian-binary control.tar.gz data.tar.gz)
        
        echo "Packaged contents of $pkg_dir into $pkg_file"
        exit 0
        IPKG_SCRIPT
        
        chmod +x scripts/ipkg-build
        echo "ipkg-build script replaced successfully"

    - name: Configure OpenWrt
      run: |
        cd openwrt
        
        cat > .config << EOF
        CONFIG_TARGET_${{ env.TARGET }}=y
        CONFIG_TARGET_${{ env.TARGET }}_${{ env.SUBTARGET }}=y
        CONFIG_TARGET_BOARD="${{ env.TARGET }}"
        CONFIG_TARGET_SUBTARGET="${{ env.SUBTARGET }}"
        CONFIG_ALL_KMODS=y
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb-uhci=y
        CONFIG_PACKAGE_kmod-usb-ehci=y
        CONFIG_PACKAGE_librt=y
        CONFIG_PACKAGE_libstdcpp=y
        CONFIG_PACKAGE_libpthread=y
        CONFIG_PACKAGE_kmod-usb-redirector-server=m
        CONFIG_PACKAGE_usb-redirector-server=m
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        CONFIG_CCACHE=y
        EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 V=s || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build tools
      run: |
        cd openwrt
        echo "Building host tools..."
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s

    - name: Build toolchain
      run: |
        cd openwrt
        echo "Building cross-compile toolchain..."
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s

    - name: Build kernel
      run: |
        cd openwrt
        echo "Building Linux kernel..."
        make target/linux/compile -j$(nproc) || make target/linux/compile -j1 V=s

    - name: Build USB Redirector packages
      run: |
        cd openwrt
        
        echo "=== Building USB Redirector packages ==="
        
        # Clean previous builds
        make package/usb-redirector-server/clean
        
        # Build following official documentation
        make package/usb-redirector-server/prepare
        make package/usb-redirector-server/compile V=99
        make package/usb-redirector-server/install
        
        echo "Build completed"

    - name: Manual creation of userspace IPK if needed
      if: always()
      run: |
        cd openwrt
        
        # Check if userspace package exists
        if ! find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" | grep -q .; then
          echo "=== Userspace package not found, creating manually ==="
          
          PKG_VERSION="3.10"
          ARCH="aarch64_cortex-a53"
          BUILD_DIR="build_dir/target-${ARCH}_musl/linux-mediatek_filogic/usb-redirector-server-${PKG_VERSION}"
          IPK_DIR="$BUILD_DIR/ipkg-$ARCH/usb-redirector-server"
          
          if [ -d "$IPK_DIR" ]; then
            echo "Creating userspace IPK manually..."
            
            # Ensure control file is clean
            if [ -f "$IPK_DIR/CONTROL/control" ]; then
              sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$IPK_DIR/CONTROL/control"
            fi
            
            # Use our custom ipkg-build
            mkdir -p bin/packages/$ARCH/base
            ./scripts/ipkg-build -m "" "$IPK_DIR" bin/packages/$ARCH/base/
            
            echo "Manual creation completed"
          else
            echo "IPK directory not found at $IPK_DIR"
          fi
        else
          echo "Userspace package already exists"
        fi

    - name: Build package index
      run: |
        cd openwrt
        make package/index V=s || true

    - name: Verify both packages exist
      run: |
        cd openwrt
        echo "=== Verifying USB Redirector packages ==="
        
        echo "1. Kernel module package:"
        find bin/ -name "kmod-usb-redirector-server*.ipk" -ls || echo "Not found!"
        
        echo ""
        echo "2. Userspace package:"
        find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" -ls || echo "Not found!"
        
        # Count packages
        KMOD_COUNT=$(find bin/ -name "kmod-usb-redirector-server*.ipk" | wc -l)
        USER_COUNT=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" | wc -l)
        
        echo ""
        echo "Summary: Found $KMOD_COUNT kernel module package(s) and $USER_COUNT userspace package(s)"
        
        if [ "$KMOD_COUNT" -eq 0 ] || [ "$USER_COUNT" -eq 0 ]; then
          echo "ERROR: Not all packages were built!"
          exit 1
        fi

    - name: Collect build artifacts
      if: always()
      run: |
        cd openwrt
        
        mkdir -p ../artifacts
        
        # Copy all USB redirector packages
        find bin/ -name "*usb-redirector*.ipk" -exec cp -v {} ../artifacts/ \;
        
        # Create installation guide
        cat > ../artifacts/INSTALL.md << 'EOF'
        # USB Redirector Server for OpenWrt
        
        ## Installation
        
        1. Copy both IPK files to your OpenWrt router
        2. Install the kernel module first:
           ```
           opkg install kmod-usb-redirector-server*.ipk
           ```
        3. Install the userspace utilities:
           ```
           opkg install usb-redirector-server*.ipk
           ```
        4. Start the service:
           ```
           /etc/init.d/usbsrvd start
           ```
        5. Enable autostart:
           ```
           /etc/init.d/usbsrvd enable
           ```
        EOF
        
        ls -la ../artifacts/

    - name: Upload packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-${{ env.TARGET }}-${{ env.SUBTARGET }}
        path: artifacts/
        retention-days: 30
