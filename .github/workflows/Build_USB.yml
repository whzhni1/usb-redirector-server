name: Build USB Redirector Server for OpenWrt

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt Target'
        required: false
        default: 'mediatek'
      subtarget:
        description: 'OpenWrt Subtarget'
        required: false
        default: 'filogic'

env:
  OPENWRT_VERSION: v23.05.3
  TARGET: ${{ github.event.inputs.target || 'mediatek' }}
  SUBTARGET: ${{ github.event.inputs.subtarget || 'filogic' }}

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt commit: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Prepare USB Redirector package
      run: |
        # Create package directory in OpenWrt
        mkdir -p openwrt/package/usb-redirector-server
        
        # Copy all files preserving structure
        cp -r Makefile openwrt/package/usb-redirector-server/
        cp -r src openwrt/package/usb-redirector-server/
        cp -r files openwrt/package/usb-redirector-server/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile

    - name: Configure OpenWrt
      run: |
        cd openwrt
        
        cat > .config << EOF
        CONFIG_TARGET_${{ env.TARGET }}=y
        CONFIG_TARGET_${{ env.TARGET }}_${{ env.SUBTARGET }}=y
        CONFIG_TARGET_BOARD="${{ env.TARGET }}"
        CONFIG_TARGET_SUBTARGET="${{ env.SUBTARGET }}"
        CONFIG_ALL_KMODS=y
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb-uhci=y
        CONFIG_PACKAGE_kmod-usb-ehci=y
        CONFIG_PACKAGE_librt=y
        CONFIG_PACKAGE_libstdcpp=y
        CONFIG_PACKAGE_libpthread=y
        CONFIG_PACKAGE_kmod-usb-redirector-server=m
        CONFIG_PACKAGE_usb-redirector-server=m
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        CONFIG_CCACHE=y
        EOF
        
        make defconfig

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 V=s || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build tools
      run: |
        cd openwrt
        echo "Building host tools..."
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s

    - name: Build toolchain
      run: |
        cd openwrt
        echo "Building cross-compile toolchain..."
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s

    - name: Build kernel
      run: |
        cd openwrt
        echo "Building Linux kernel..."
        make target/linux/compile -j$(nproc) || make target/linux/compile -j1 V=s

    - name: Patch ipkg-build to skip library checks completely
      run: |
        cd openwrt
        
        # Save original
        cp scripts/ipkg-build scripts/ipkg-build.original
        
        # Patch ipkg-build to completely skip library checks
        sed -i '
        /^###$/a\
        # Skip library checks for precompiled binaries\
        if [ -n "$IPKG_NO_SHLIBS" ] || echo "$pkg_dir" | grep -q "usb-redirector-server"; then\
          echo "Skipping shared library dependency checks"\
          required_libs=""\
        fi
        
        /for file in `find/,/^done$/d
        /if.*file_has_debian_shlibs/,/^fi$/d
        /Package $pkg is missing/,/exit 1$/d
        ' scripts/ipkg-build

    - name: Build USB Redirector packages using official method
      run: |
        cd openwrt
        
        echo "=== Building USB Redirector packages (official method) ==="
        
        # Set environment to skip library checks
        export IPKG_NO_SHLIBS=1
        
        # Follow official documentation steps
        make package/usb-redirector-server/clean
        make package/usb-redirector-server/prepare
        make package/usb-redirector-server/compile V=99
        make package/usb-redirector-server/install
        
        echo "Build completed"

    - name: If normal build fails, force create userspace IPK
      if: failure()
      run: |
        cd openwrt
        
        echo "=== Force creating userspace IPK package ==="
        
        # Find the build directory
        PKG_VERSION="3.10"
        ARCH="aarch64_cortex-a53"
        BUILD_BASE="build_dir/target-${ARCH}_musl/linux-mediatek_filogic"
        
        # Check both possible versions
        if [ -d "$BUILD_BASE/usb-redirector-server-3.10" ]; then
          BUILD_DIR="$BUILD_BASE/usb-redirector-server-3.10"
        elif [ -d "$BUILD_BASE/usb-redirector-server-3.9.8" ]; then
          BUILD_DIR="$BUILD_BASE/usb-redirector-server-3.9.8"
          PKG_VERSION="3.9.8"
        else
          echo "Build directory not found!"
          exit 1
        fi
        
        IPK_DIR="$BUILD_DIR/ipkg-$ARCH/usb-redirector-server"
        
        if [ -d "$IPK_DIR" ]; then
          echo "Found IPK staging directory: $IPK_DIR"
          
          # Create control file if missing
          mkdir -p "$IPK_DIR/CONTROL"
          if [ ! -f "$IPK_DIR/CONTROL/control" ]; then
            cat > "$IPK_DIR/CONTROL/control" << CONTROL_EOF
        Package: usb-redirector-server
        Version: $PKG_VERSION
        Architecture: $ARCH
        Maintainer: IncentivesPro <support@incentivespro.com>
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        CONTROL_EOF
          else
            # Clean existing control file
            sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$IPK_DIR/CONTROL/control"
          fi
          
          # Create postinst script if missing
          if [ ! -f "$IPK_DIR/CONTROL/postinst" ]; then
            cat > "$IPK_DIR/CONTROL/postinst" << 'POST_EOF'
        #!/bin/sh
        [ "${IPKG_NO_SCRIPT}" = "1" ] && exit 0
        [ -s "${IPKG_INSTROOT}/lib/functions.sh" ] || exit 0
        . ${IPKG_INSTROOT}/lib/functions.sh
        default_postinst $0 $@
        POST_EOF
            chmod 755 "$IPK_DIR/CONTROL/postinst"
          fi
          
          # Create prerm script if missing
          if [ ! -f "$IPK_DIR/CONTROL/prerm" ]; then
            cat > "$IPK_DIR/CONTROL/prerm" << 'PRE_EOF'
        #!/bin/sh
        [ -s "${IPKG_INSTROOT}/lib/functions.sh" ] || exit 0
        . ${IPKG_INSTROOT}/lib/functions.sh
        default_prerm $0 $@
        PRE_EOF
            chmod 755 "$IPK_DIR/CONTROL/prerm"
          fi
          
          # Create the IPK package manually
          echo "Creating IPK package..."
          
          # Use fakeroot for proper permissions
          OUTPUT_DIR="bin/packages/$ARCH/base"
          mkdir -p "$OUTPUT_DIR"
          
          # Create IPK using tar and ar
          ./staging_dir/host/bin/fakeroot bash -c "
            cd '$IPK_DIR'
            # Create data archive
            tar -czf /tmp/data.tar.gz --exclude='./CONTROL' .
            # Create control archive
            tar -czf /tmp/control.tar.gz -C CONTROL .
            # Create debian-binary
            echo '2.0' > /tmp/debian-binary
            # Create IPK
            cd /tmp
            ar rc usb-redirector-server_${PKG_VERSION}_${ARCH}.ipk debian-binary control.tar.gz data.tar.gz
            mv usb-redirector-server_${PKG_VERSION}_${ARCH}.ipk '$GITHUB_WORKSPACE/openwrt/$OUTPUT_DIR/'
          "
          
          echo "IPK package created successfully"
          
          # Verify the package was created
          ls -la "$OUTPUT_DIR/usb-redirector-server_${PKG_VERSION}_${ARCH}.ipk"
        else
          echo "ERROR: IPK staging directory not found"
          exit 1
        fi

    - name: Build package index
      run: |
        cd openwrt
        make package/index V=s || true

    - name: Verify both packages exist
      run: |
        cd openwrt
        echo "=== Verifying USB Redirector packages ==="
        
        echo "1. Kernel module package (kmod-usb-redirector-server):"
        find bin/ -name "kmod-usb-redirector-server*.ipk" -ls
        
        echo ""
        echo "2. Userspace package (usb-redirector-server):"
        find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" -ls
        
        echo ""
        echo "Total USB Redirector packages found:"
        find bin/ -name "*usb-redirector*.ipk" | wc -l

    - name: Collect build artifacts
      if: always()
      run: |
        cd openwrt
        
        # Create artifacts directory
        mkdir -p ../artifacts
        
        # Copy all USB redirector packages
        echo "Copying packages to artifacts..."
        find bin/ -name "*usb-redirector*.ipk" -exec cp -v {} ../artifacts/ \;
        
        # Create summary
        cat > ../artifacts/README.txt << EOF
        USB Redirector Server for OpenWrt
        ==================================
        Build Date: $(date)
        OpenWrt Version: ${{ env.OPENWRT_VERSION }}
        Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
        
        Packages built:
        ---------------
        EOF
        
        ls -la ../artifacts/*.ipk >> ../artifacts/README.txt 2>/dev/null || echo "No packages found" >> ../artifacts/README.txt
        
        echo "" >> ../artifacts/README.txt
        echo "Installation Instructions:" >> ../artifacts/README.txt
        echo "-------------------------" >> ../artifacts/README.txt
        echo "1. Copy both IPK files to your OpenWrt device" >> ../artifacts/README.txt
        echo "2. Install kernel module first:" >> ../artifacts/README.txt
        echo "   opkg install kmod-usb-redirector-server*.ipk" >> ../artifacts/README.txt
        echo "3. Install userspace utilities:" >> ../artifacts/README.txt
        echo "   opkg install usb-redirector-server*.ipk" >> ../artifacts/README.txt
        
        echo "=== Build Summary ==="
        cat ../artifacts/README.txt

    - name: Upload packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-${{ env.TARGET }}-${{ env.SUBTARGET }}
        path: artifacts/
        retention-days: 30

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ env.TARGET }}-${{ env.SUBTARGET }}
        path: |
          openwrt/logs/
          openwrt/build_dir/target-*/usb-redirector-server*/
        retention-days: 7
