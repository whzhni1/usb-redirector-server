name: Build OpenWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'OpenWrt version (e.g., v23.05.3, main, openwrt-24.10)'
        required: false
        default: 'v23.05.3'

env:
  OPENWRT_VERSION: ${{ github.event.inputs.openwrt_version || 'v23.05.3' }}
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          python3-pyelftools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev \
          genisoimage

    - name: Clone OpenWrt
      run: |
        echo "Attempting to clone OpenWrt version: ${{ env.OPENWRT_VERSION }}"
        
        # Try different branch/tag formats
        if git ls-remote --heads --tags https://github.com/openwrt/openwrt.git | grep -q "${{ env.OPENWRT_VERSION }}"; then
          echo "Found branch/tag: ${{ env.OPENWRT_VERSION }}"
          git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        elif [ "${{ env.OPENWRT_VERSION }}" = "24.10" ] || [ "${{ env.OPENWRT_VERSION }}" = "openwrt-24.10" ]; then
          echo "Trying main branch for 24.10 development"
          git clone --depth 1 https://github.com/openwrt/openwrt.git
        else
          echo "Using specified version: ${{ env.OPENWRT_VERSION }}"
          git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        fi
        
        cd openwrt
        echo "OpenWrt version: $(git describe --tags --always 2>/dev/null || git rev-parse --short HEAD)"
        echo "OpenWrt commit: $(git rev-parse HEAD)"
        
        # Check kernel version
        ls include/kernel-* 2>/dev/null | head -5

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure OpenWrt for CMCC RAX3000M (minimal config first)
      run: |
        cd openwrt
        
        # Determine if this is 24.10 or newer
        IS_NEW_VERSION=false
        if [ -f "include/kernel-6.6" ] || [ -f "include/kernel-6.1" ]; then
          IS_NEW_VERSION=true
          echo "Detected new OpenWrt version with kernel 6.x"
        fi
        
        # Create minimal configuration first
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network basics
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        
        # WiFi (minimal)
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_iw=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        # Add version-specific configs
        if [ "$IS_NEW_VERSION" = true ]; then
          echo "Adding configs for new version..."
          cat >> .config << EOF
        # New version specific
        CONFIG_PACKAGE_firewall4=y
        CONFIG_PACKAGE_nftables=y
        CONFIG_PACKAGE_kmod-nft-nat=y
        CONFIG_PACKAGE_kmod-mt7981-firmware=y
        EOF
        else
          echo "Adding configs for stable version..."
          cat >> .config << EOF
        # Stable version specific
        CONFIG_PACKAGE_firewall=y
        CONFIG_PACKAGE_iptables=y
        CONFIG_PACKAGE_kmod-ipt-nat=y
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        EOF
        fi
        
        make defconfig
        
        echo "=== Minimal configuration complete ==="
        
        # Show what will be built
        echo "Target system:"
        grep "CONFIG_TARGET_BOARD\|CONFIG_LINUX" .config | grep -v "^#" | head -10

    - name: Download package sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base OpenWrt firmware (minimal)
      run: |
        cd openwrt
        
        echo "=== Building minimal OpenWrt firmware ==="
        
        # Use fewer cores to be safer with memory
        make -j4 world || {
          echo "Parallel build failed, retrying with verbose single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Check base build results
      run: |
        cd openwrt
        
        echo "=== Base build results ==="
        echo "Kernel version:"
        find build_dir -name "linux-*" -type d | grep -v ".o" | head -1 | xargs basename
        
        echo ""
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/ | grep -E "\.(bin|itb|img)" || echo "No firmware files"
        
        echo ""
        echo "Packages built:"
        find bin/ -name "*.ipk" | wc -l

    - name: Copy USB Redirector package to OpenWrt
      run: |
        echo "=== Now adding USB Redirector Server package ==="
        
        # Copy package to OpenWrt
        cp -r usb-redirector-server openwrt/package/
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile
        
        # Check kernel module extension
        cd openwrt
        KMOD_EXT=".ko"
        if grep -q "CONFIG_LINUX_6" .config 2>/dev/null; then
          echo "Detected kernel 6.x, updating module extension if needed"
          sed -i 's/LINUX_KMOD_SUFFIX/LINUX_KMOD_SUFFIX:=.ko/g' package/usb-redirector-server/Makefile
        fi
        
        echo "Package copied successfully"

    - name: Build USB Redirector packages separately
      run: |
        cd openwrt
        
        echo "=== Building USB Redirector packages separately ==="
        
        # Update config to include USB Redirector as modules
        echo "CONFIG_PACKAGE_usb-redirector-server=m" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=m" >> .config
        
        # Refresh config
        make defconfig
        
        # Clean any previous attempts
        make package/usb-redirector-server/clean V=s || true
        
        # Build with library check bypass
        echo "Building USB Redirector packages..."
        
        # Backup ipkg-build
        cp scripts/ipkg-build scripts/ipkg-build.original
        
        # Create bypass wrapper
        cat > scripts/ipkg-build.wrapper << 'WRAPPER_EOF'
        #!/bin/bash
        
        # Get package name from control file
        for arg in "$@"; do
          if [ -d "$arg" ] && [ -f "$arg/CONTROL/control" ]; then
            pkg_name=$(grep "^Package:" "$arg/CONTROL/control" | cut -d' ' -f2)
            if [ "$pkg_name" = "usb-redirector-server" ]; then
              echo "Special handling for $pkg_name"
              # Remove library dependencies
              sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$arg/CONTROL/control"
            fi
            break
          fi
        done
        
        # Call original
        exec scripts/ipkg-build.original "$@"
        WRAPPER_EOF
        
        chmod +x scripts/ipkg-build.wrapper
        mv scripts/ipkg-build scripts/ipkg-build.tmp
        mv scripts/ipkg-build.wrapper scripts/ipkg-build
        
        # Try to build
        make package/usb-redirector-server/compile V=s || {
          echo "Build failed, will try manual creation"
        }
        
        # Restore original ipkg-build
        mv scripts/ipkg-build.original scripts/ipkg-build 2>/dev/null || true
        
        echo "=== USB Redirector build attempt completed ==="

    - name: Manually create USB Redirector userspace IPK if needed
      if: always()
      run: |
        cd openwrt
        
        # Check what packages exist
        echo "Checking for packages..."
        KMOD_PKG=$(find bin/ -name "kmod-usb-redirector-server*.ipk" 2>/dev/null | head -1)
        USER_PKG=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | head -1)
        
        echo "Kernel module: ${KMOD_PKG:-Not found}"
        echo "Userspace: ${USER_PKG:-Not found}"
        
        if [ -z "$USER_PKG" ]; then
          echo "=== Creating userspace package manually ==="
          
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          IPK_DIR=$(find "$BUILD_DIR" -type d -path "*/usb-redirector-server*/ipkg-*/usb-redirector-server" 2>/dev/null | head -1)
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found IPK staging at: $IPK_DIR"
            
            mkdir -p "$IPK_DIR/CONTROL"
            cat > "$IPK_DIR/CONTROL/control" << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        EOF
            
            mkdir -p bin/packages/aarch64_cortex-a53/base
            
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar -czf /tmp/data.tar.gz --exclude=CONTROL .
            echo "2.0" > /tmp/debian-binary
            
            ar -cr "$GITHUB_WORKSPACE/openwrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            echo "Manual IPK creation completed"
            cd "$GITHUB_WORKSPACE/openwrt"
          fi
        fi

    - name: Final summary
      if: always()
      run: |
        cd openwrt
        
        echo "=== Final Build Summary ==="
        echo "OpenWrt Version: ${{ env.OPENWRT_VERSION }}"
        
        echo ""
        echo "Firmware images:"
        find bin/targets/ -type f \( -name "*.bin" -o -name "*.itb" -o -name "*.img.gz" \) -exec ls -lh {} \;
        
        echo ""
        echo "USB Redirector packages:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \;
        
        echo ""
        echo "Total packages: $(find bin/ -name "*.ipk" | wc -l)"

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware
        find openwrt/bin/targets/ -type f \( -name "*.bin" -o -name "*.itb" -o -name "*.img.gz" \) \
          -exec cp -v {} artifacts/firmware/ \;
        
        # Copy USB Redirector packages
        find openwrt/bin/ -name "*usb-redirector*.ipk" -exec cp -v {} artifacts/packages/ \;
        
        # Create info
        cat > artifacts/README.md << EOF
        # OpenWrt Build for CMCC RAX3000M
        
        Version: ${{ env.OPENWRT_VERSION }}
        Date: $(date)
        Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
        
        ## Installation
        
        1. Flash firmware or
        2. Install IPK packages:
           - opkg install kmod-usb-redirector-server*.ipk
           - opkg install usb-redirector-server*.ipk
        EOF
        
        ls -la artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: openwrt-${{ env.OPENWRT_VERSION }}-build
        path: artifacts/
        retention-days: 30
