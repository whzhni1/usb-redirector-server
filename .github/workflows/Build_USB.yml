name: Build OpenWrt with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v23.05.3
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Maximize build space
      run: |
        echo "=== Free disk space ==="
        df -h
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /opt/hostedtoolcache/CodeQL
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          java-propose-classpath libelf-dev libncurses-dev libssl-dev \
          python3 python3-dev python3-distutils python3-setuptools \
          qemu-utils rsync subversion swig time unzip wget xsltproc zlib1g-dev

    - name: Clone OpenWrt
      run: |
        git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} https://github.com/openwrt/openwrt.git
        cd openwrt
        echo "OpenWrt commit: $(git rev-parse HEAD)"

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Prepare USB Redirector package
      run: |
        # Copy package to OpenWrt
        cp -r . openwrt/package/usb-redirector-server
        
        # Remove .git and workflow files
        rm -rf openwrt/package/usb-redirector-server/.git
        rm -rf openwrt/package/usb-redirector-server/.github
        
        # Fix Makefile tabs
        sed -i 's/^[ ]\+\([$(]\)/\t\1/g' openwrt/package/usb-redirector-server/Makefile
        
        # Copy patches if they exist
        if [ -d "patches" ]; then
          mkdir -p openwrt/package/usb-redirector-server/patches
          cp patches/*.patch openwrt/package/usb-redirector-server/patches/
        fi

    - name: Patch OpenWrt to bypass library checks
      run: |
        cd openwrt
        
        # Method 1: Replace ipkg-build with version that skips library checks
        mv scripts/ipkg-build scripts/ipkg-build.orig
        
        cat > scripts/ipkg-build << 'IPKG_BUILD_END'
        #!/bin/bash
        set -e
        
        # Get arguments
        pkg_dir=""
        dest_dir=""
        while [ "$#" -gt 0 ]; do
          case "$1" in
            -m) shift ;;
            -*) shift ;;
            *)
              if [ -z "$pkg_dir" ]; then
                pkg_dir="$1"
              else
                dest_dir="$1"
              fi
              shift ;;
          esac
        done
        
        [ -z "$dest_dir" ] && dest_dir="."
        
        # Get package info
        control="$pkg_dir/CONTROL/control"
        if [ ! -f "$control" ]; then
          echo "Error: $control not found"
          exit 1
        fi
        
        name=$(grep "^Package:" "$control" | cut -d' ' -f2)
        version=$(grep "^Version:" "$control" | cut -d' ' -f2)
        arch=$(grep "^Architecture:" "$control" | cut -d' ' -f2)
        
        # Check if it's usb-redirector-server
        if echo "$name" | grep -q "usb-redirector"; then
          echo "Building $name - skipping library checks"
          # Remove library dependencies
          sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$control"
        else
          # For other packages, use original script
          exec scripts/ipkg-build.orig "$@"
        fi
        
        # Create IPK
        pkg_file="$dest_dir/${name}_${version}_${arch}.ipk"
        
        # Clean up
        find "$pkg_dir" -name 'CVS' -o -name '.svn' -o -name '.#*' -o -name '*~' | xargs -r rm -rf
        
        # Create IPK
        tmp_dir=$(mktemp -d)
        echo "2.0" > "$tmp_dir/debian-binary"
        (cd "$pkg_dir/CONTROL" && tar -czf "$tmp_dir/control.tar.gz" .)
        (cd "$pkg_dir" && tar --exclude=CONTROL -czf "$tmp_dir/data.tar.gz" .)
        (cd "$tmp_dir" && ar -cr "$pkg_file" debian-binary control.tar.gz data.tar.gz)
        rm -rf "$tmp_dir"
        
        echo "Packaged $pkg_file"
        IPKG_BUILD_END
        
        chmod +x scripts/ipkg-build

    - name: Configure OpenWrt
      run: |
        cd openwrt
        
        cat > .config << EOF
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-redirector-server=m
        CONFIG_PACKAGE_usb-redirector-server=m
        CONFIG_PACKAGE_luci=y
        EOF
        
        make defconfig

    - name: Download sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s

    - name: Build firmware and packages
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s

    - name: Force create missing IPK if needed
      if: always()
      run: |
        cd openwrt
        
        # Check what packages exist
        echo "=== Checking for packages ==="
        KMOD_IPK=$(find bin/ -name "kmod-usb-redirector-server*.ipk" 2>/dev/null | head -1)
        USER_IPK=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | head -1)
        
        echo "Kernel module: ${KMOD_IPK:-NOT FOUND}"
        echo "Userspace: ${USER_IPK:-NOT FOUND}"
        
        # If userspace package is missing, create it manually
        if [ -z "$USER_IPK" ]; then
          echo "Creating userspace IPK manually..."
          
          # Find the prepared package directory
          IPK_DIR=$(find build_dir -type d -path "*/ipkg-*/usb-redirector-server" 2>/dev/null | head -1)
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found IPK directory: $IPK_DIR"
            
            # Get package info
            PKG_VERSION="3.10"
            PKG_ARCH="aarch64_cortex-a53"
            OUTPUT_DIR="bin/packages/$PKG_ARCH/base"
            mkdir -p "$OUTPUT_DIR"
            
            # Create control file if missing
            mkdir -p "$IPK_DIR/CONTROL"
            if [ ! -f "$IPK_DIR/CONTROL/control" ]; then
              cat > "$IPK_DIR/CONTROL/control" << CONTROL_END
        Package: usb-redirector-server
        Version: $PKG_VERSION
        Architecture: $PKG_ARCH
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Description: USB Redirector Server
        CONTROL_END
            fi
            
            # Remove library dependencies
            sed -i '/libc\.so\|libm\.so\|libpthread\.so\|librt\.so/d' "$IPK_DIR/CONTROL/control"
            
            # Create IPK
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar --exclude=CONTROL -czf /tmp/data.tar.gz .
            echo "2.0" > /tmp/debian-binary
            ar -cr "$GITHUB_WORKSPACE/openwrt/$OUTPUT_DIR/usb-redirector-server_${PKG_VERSION}_${PKG_ARCH}.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            cd "$GITHUB_WORKSPACE/openwrt"
            echo "Created: $OUTPUT_DIR/usb-redirector-server_${PKG_VERSION}_${PKG_ARCH}.ipk"
          fi
        fi

    - name: List all built files
      if: always()
      run: |
        cd openwrt
        
        echo "=== Firmware files ==="
        ls -la bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/ 2>/dev/null || echo "No firmware"
        
        echo ""
        echo "=== IPK packages ==="
        find bin/ -name "*.ipk" -type f | head -20
        
        echo ""
        echo "=== USB Redirector packages ==="
        find bin/ -name "*usb-redirector*.ipk" -type f

    - name: Prepare artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        
        # Copy firmware
        if [ -d "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}" ]; then
          cp -r openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/* artifacts/firmware/ 2>/dev/null || true
        fi
        
        # Copy USB Redirector packages
        find openwrt/bin -name "*usb-redirector*.ipk" -exec cp {} artifacts/packages/ \; 2>/dev/null || true
        
        # Create info file
        cat > artifacts/INFO.txt << EOF
        Build Information
        =================
        Date: $(date)
        OpenWrt: ${{ env.OPENWRT_VERSION }}
        Target: ${{ env.TARGET }}/${{ env.SUBTARGET }}
        Device: ${{ env.DEVICE_PROFILE }}
        
        Packages:
        $(ls -la artifacts/packages/*.ipk 2>/dev/null || echo "None")
        
        Firmware:
        $(ls -la artifacts/firmware/*.bin 2>/dev/null || echo "None")
        EOF
        
        echo "=== Artifacts summary ==="
        cat artifacts/INFO.txt

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: firmware-${{ env.DEVICE_PROFILE }}
        path: artifacts/firmware/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload IPK packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: usb-redirector-ipk
        path: artifacts/packages/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: all-artifacts
        path: artifacts/
        retention-days: 30
